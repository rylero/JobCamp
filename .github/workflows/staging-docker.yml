name: "Generate Staging Docker Container"

on:
  push:
    branches:
      - stage

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: test
      DATABASE_URL: "file:./test.db"

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        timeout-minutes: 10

      - name: Generate Prisma client
        run: pnpm prisma generate
        timeout-minutes: 5

      - name: Run tests
        run: pnpm test:run
        timeout-minutes: 5

      - name: Run linting
        run: pnpm lint || true
        timeout-minutes: 5

      - name: Run type checking
        run: pnpm check || true
        timeout-minutes: 5

      - name: Build the project
        run: pnpm run build
        timeout-minutes: 10

      - name: Run smoke test (preview and test)
        run: |
          npx kill-port 4173 || true  # Ensure the port isn't in use
          pnpm run preview &
          PREVIEW_PID=$!
          sleep 10  # Give the server time to start
          curl --fail http://localhost:4173 || exit 1  # Ensure the server is running
          kill $PREVIEW_PID || true
        timeout-minutes: 5

      - name: Smoke test complete
        run: echo "âœ… All tests and smoke test passed!"

  generate-staging-docker-container:
    runs-on: "ubuntu-latest"
    needs: test # Only run if tests pass

    permissions:
      contents: "read"
      id-token: "write"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"

      - name: "Login to GitHub Container Registry"
        uses: "docker/login-action@v3"
        with:
          registry: ghcr.io
          username: "rylero"
          password: "${{ secrets.CR_PAT }}"

      - name: "Build and Push Container"
        run: |-
          DOCKER_TAG="ghcr.io/rylero/jobcampstaging:latest"
          docker buildx build -f staging.Dockerfile --tag "${DOCKER_TAG}" --build-arg DATABASE_URL="${{ secrets.STAGING_DATABASE_URL }}" --build-arg MAILTRAP_TOKEN="${{ secrets.MAILTRAP_TOKEN }}" .
          docker push "${DOCKER_TAG}"
