generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id                    String     @id @default(cuid())
  schoolId              String
  date                  DateTime
  displayLotteryResults Boolean
  school                School     @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  positions             Position[]

  @@index([schoolId], map: "Event_schoolId_fkey")
}

model School {
  id          String    @id @default(cuid())
  name        String
  emailDomain String
  webAddr     String
  adminId     String    @unique
  companies   Company[]
  events      Event[]
  admin       User      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  students    Student[]
}

model Position {
  id                String                @id @default(cuid())
  start             DateTime
  end               DateTime
  eventId           String
  hostId            String
  event             Event                 @relation(fields: [eventId], references: [id])
  host              Host                  @relation(fields: [hostId], references: [id])
  students          PositionsOnStudents[]
  studentsAttending Student[]

  @@index([eventId], map: "Position_eventId_fkey")
  @@index([hostId], map: "Position_hostId_fkey")
}

model Student {
  id                      String                @id @default(cuid())
  name                    String
  phone                   String
  grade                   Int
  parentEmail             String
  permissionSlipCompleted Boolean               @default(false)
  schoolId                String?
  userId                  String?               @unique
  lotteryPositionId       String?
  positionsSignedUpFor    PositionsOnStudents[]
  lotteryResult           Position?             @relation(fields: [lotteryPositionId], references: [id])
  school                  School?               @relation(fields: [schoolId], references: [id])
  user                    User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([lotteryPositionId], map: "Student_lotteryPositionId_fkey")
  @@index([schoolId], map: "Student_schoolId_fkey")
}

model PositionsOnStudents {
  positionId String
  studentId  String
  position   Position @relation(fields: [positionId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])

  @@id([positionId, studentId])
  @@index([studentId], map: "PositionsOnStudents_studentId_fkey")
}

model Company {
  id                 String  @id @default(cuid())
  companyName        String  @unique
  companyDescription String  @db.VarChar(1024)
  companyUrl         String?
  schoolId           String?
  school             School? @relation(fields: [schoolId], references: [id])
  hosts              Host[]

  @@index([schoolId], map: "Company_schoolId_fkey")
}

model Host {
  id        String     @id @default(cuid())
  name      String
  companyId String?
  userId    String     @unique
  company   Company?   @relation(fields: [companyId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
  positions Position[]

  @@index([companyId], map: "Host_companyId_fkey")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  passwordSalt  String
  emailVerified Boolean   @default(false)
  lastLogin     DateTime
  host          Host?
  school        School?
  sessions      Session[]
  student       Student?
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model EmailVerificationCodes {
  id         String   @id @default(cuid())
  user_id    String   @unique
  email      String
  code       String
  expires_at DateTime
}

model PasswordResetTokens {
  id         String   @id @default(cuid())
  user_id    String   @unique
  token_hash String   @unique
  expires_at DateTime
}

model PermissionSlipCode {
  id      String @id @default(cuid())
  user_id String @unique
  code    String
}
