generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id String @id @default(cuid())

  schoolId String
  school   School @relation(references: [id], fields: [schoolId], onDelete: Cascade)

  date DateTime

  displayLotteryResults Boolean

  positions Position[]
}

model School {
  id String @id @default(cuid())

  name        String
  emailDomain String
  webAddr     String

  admins User[] @relation("SchoolAdmins")

  events Event[]

  students  Student[]
  companies Company[]
  lotteryConfiguration LotteryConfiguration?
}

model Position {
  id                String                @id @default(cuid())
  title             String
  career            String
  slots             Int
  summary           String                @db.VarChar(1024)
  contact_name      String
  contact_email     String
  address           String                @db.VarChar(1024)
  instructions      String                @db.VarChar(1024)
  attire            String                @db.VarChar(1024)
  arrival           String
  start             String
  end               String
  eventId           String
  hostId            String
  event             Event                 @relation(fields: [eventId], references: [id])
  host              Host                  @relation(fields: [hostId], references: [id])
  students          PositionsOnStudents[]
  studentsAttending Student[]
  manualAssignments ManualAssignment[]
  attachments       Attachment[]

  @@index([eventId], map: "Position_eventId_fkey")
  @@index([hostId], map: "Position_hostId_fkey")
}

model Attachment {
  id         String   @id @default(cuid())
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
  positionId String

  fileName String
}

model Student {
  id String @id @default(cuid())

  firstName String
  lastName  String
  phone     String
  grade     Int

  parentEmail             String
  permissionSlipCompleted Boolean @default(false)

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  positionsSignedUpFor PositionsOnStudents[]
  manualAssignments    ManualAssignment[]

  lotteryPositionId String?
  lotteryResult     Position? @relation(fields: [lotteryPositionId], references: [id])
}

model PositionsOnStudents {
  position   Position @relation(fields: [positionId], references: [id])
  positionId String
  student    Student  @relation(fields: [studentId], references: [id])
  studentId  String
  rank       Int

  @@id([positionId, studentId])
}

model Company {
  id String @id @default(cuid())

  companyName        String  @unique
  companyDescription String  @db.VarChar(1024)
  companyUrl         String?

  school   School? @relation(fields: [schoolId], references: [id])
  schoolId String?

  hosts Host[]
  prefillSettings PrefillSetting[]
}

model Host {
  id String @id @default(cuid())

  name String

  companyId String?
  company   Company? @relation(references: [id], fields: [companyId])

  userId String @unique
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)

  positions Position[]
}

model User {
  id            String  @id @default(cuid())
  email         String  @unique
  passwordHash  String
  passwordSalt  String
  emailVerified Boolean @default(false)

  student Student?
  host    Host?

  adminOfSchools School[] @relation("SchoolAdmins")

  lastLogin DateTime

  sessions Session[]
}

model Session {
  id        String   @id
  expiresAt DateTime

  userId String
  user   User   @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationCodes {
  id         String   @id @default(cuid())
  user_id    String   @unique
  email      String
  code       String
  expires_at DateTime
}

model PasswordResetTokens {
  id         String   @id @default(cuid())
  user_id    String   @unique
  token_hash String   @unique
  expires_at DateTime
}

model PermissionSlipCode {
  id      String @id @default(cuid())
  user_id String @unique
  code    String
}

model PermissionSlipSubmission {
  id                   String  @id @default(cuid())
  user_id              String  @unique
  parentName           String
  phoenNumber          String // Wrong spelling
  studentFirstName     String
  studentLastName      String
  physicalRestrictions String?
  dietaryRestrictions  String?
  liability            String
  liabilityDate        String
}

model LotteryJob {
    id          String   @id @default(cuid())
    status      String   // RUNNING, COMPLETED, FAILED
    progress    Float    @default(0)
    currentSeed Int      @default(0)
    adminId     String
    startedAt   DateTime @default(now())
    completedAt DateTime?
    error       String?
    results     LotteryResults[]
}

model LotteryResults {
    id           String   @id @default(cuid())
    lotteryJobId String
    lotteryJob   LotteryJob @relation(fields: [lotteryJobId], references: [id], onDelete: Cascade)
    studentId    String
    positionId   String
    createdAt    DateTime @default(now())
    
    @@unique([studentId, lotteryJobId]) // One result per student per job
}

model LotteryConfiguration {
    id                    String   @id @default(cuid())
    schoolId              String
    school                School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
    gradeOrder            String   @default("NONE") // NONE, ASCENDING, DESCENDING
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
    
    manualAssignments     ManualAssignment[]
    prefillSettings       PrefillSetting[]
    
    @@unique([schoolId]) // One config per school
}

model ManualAssignment {
    id                    String   @id @default(cuid())
    lotteryConfigId       String
    lotteryConfig         LotteryConfiguration @relation(fields: [lotteryConfigId], references: [id], onDelete: Cascade)
    studentId             String
    positionId            String
    createdAt             DateTime @default(now())
    
    student               Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
    position              Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
    
    @@unique([studentId, lotteryConfigId]) // One manual assignment per student per config
}

model PrefillSetting {
    id                    String   @id @default(cuid())
    lotteryConfigId       String
    lotteryConfig         LotteryConfiguration @relation(fields: [lotteryConfigId], references: [id], onDelete: Cascade)
    companyId             String
    prefillPercentage     Int      // 0-100
    createdAt             DateTime @default(now())
    
    company               Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
    
    @@unique([companyId, lotteryConfigId]) // One prefill setting per company per config
}