generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mysql"
  url       = env("DATABASE_URL")
}

model Event {
  id                       String      @id @default(cuid())

  schoolId                 String
  school                   School      @relation(references: [id], fields: [schoolId], onDelete: Cascade)

  date                     DateTime

  displayLotteryResults    Boolean

  positions                Position[]
}

model School {
  id                       String      @id @default(cuid())
  
  name                     String
  emailDomain              String
  webAddr                  String

  adminId                  String      @unique
  admin                    User        @relation(references: [id], fields: [adminId], onDelete: Cascade)

  events                   Event[]

  students                 Student[]
  companies                Company[]
}

model Position {
  id                String                @id @default(cuid())
  title             String
  career            String
  slots             Int
  summary           String                @db.VarChar(1024)
  contact_name      String
  contact_email     String
  address           String                @db.VarChar(1024)
  instructions      String                @db.VarChar(1024)
  attire            String                @db.VarChar(1024)
  arrival           DateTime              
  start             DateTime
  end               DateTime
  eventId           String
  hostId            String
  event             Event                 @relation(fields: [eventId], references: [id])
  host              Host                  @relation(fields: [hostId], references: [id])
  students          PositionsOnStudents[]
  studentsAttending Student[]

  @@index([eventId], map: "Position_eventId_fkey")
  @@index([hostId], map: "Position_hostId_fkey")
}

model Student {
  id                       String      @id @default(cuid())

  firstName                String
  lastName                String
  phone                    String
  grade                    Int

  parentEmail              String
  permissionSlipCompleted  Boolean     @default(false)

  school                   School?     @relation(fields: [schoolId], references: [id])
  schoolId                 String?

  userId                   String?     @unique
  user                     User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  positionsSignedUpFor     PositionsOnStudents[]

  lotteryPositionId        String?
  lotteryResult            Position?   @relation(fields: [lotteryPositionId], references: [id])
}

model PositionsOnStudents {
  position                 Position    @relation(fields: [positionId], references: [id])
  positionId               String
  student                  Student     @relation(fields: [studentId], references: [id])
  studentId                String
  rank                     Int

  @@id([positionId, studentId])
}

model Company {
  id                       String      @id @default(cuid())

  companyName              String      @unique
  companyDescription       String      @db.VarChar(1024)
  companyUrl               String?

  school                   School?     @relation(fields: [schoolId], references: [id])
  schoolId                 String?

  hosts                    Host[]
}

model Host {
  id                       String      @id @default(cuid())

  name                     String

  companyId                String?
  company                  Company?    @relation(references: [id], fields: [companyId])
  
  userId                   String      @unique
  user                     User        @relation(references: [id], fields: [userId], onDelete: Cascade)

  positions                Position[]
}

model User {
  id                       String      @id @default(cuid())
  email                    String      @unique
  passwordHash             String
  passwordSalt             String
  emailVerified            Boolean     @default(false)
  
  student                  Student?
  host                     Host?
  school                   School?
  
  lastLogin                DateTime
  
  sessions                 Session[]
}

model Session {
  id                       String      @id
  expiresAt                DateTime

  userId                   String
  user                     User        @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerificationCodes {
  id                       String      @id @default(cuid())
  user_id                  String      @unique
  email                    String
  code                     String
  expires_at               DateTime
}

model PasswordResetTokens {
  id                       String      @id @default(cuid())
  user_id                  String      @unique
  token_hash               String      @unique
  expires_at               DateTime
}

model PermissionSlipCode {
  id                       String      @id @default(cuid())
  user_id                  String      @unique
  code                     String
}